{"ast":null,"code":"import _asyncToGenerator from \"C:/SSAFY/workspace/vuejs/happyhouse_final/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport VueAlertify from \"vue-alertify\";\nVue.use(VueAlertify);\nimport http from \"@/api/http.js\";\nexport default {\n  // data 사용 X\n  data: function data() {\n    return {\n      // v-model\n      userName: \"\",\n      userEmail: \"\",\n      userPassword: \"\",\n      userPassword2: \"\",\n      // focus\n      isUserNameFocus: false,\n      isUserEmailFocus: false,\n      isUserPasswordFocus: false,\n      isUserPassword2Focus: false,\n      // validation\n      isUserNameValid: false,\n      isUserEmailValid: false,\n      isUserPasswordValid: false,\n      isUserPassword2Valid: false,\n      // 회원 구분\n      groupCode: \"001\",\n      codeList: [],\n      userClsf: \"001\",\n      // 일반회원 default\n      checked: false\n    };\n  },\n  computed: {\n    isUserNameFocusAndValid: function isUserNameFocusAndValid() {\n      return this.isUserNameFocus && this.isUserNameValid;\n    },\n    isUserNameFocusAndInvalid: function isUserNameFocusAndInvalid() {\n      return this.isUserNameFocus && !this.isUserNameValid;\n    },\n    isUserEmailFocusAndValid: function isUserEmailFocusAndValid() {\n      return this.isUserEmailFocus && this.isUserEmailValid;\n    },\n    isUserEmailFocusAndInValid: function isUserEmailFocusAndInValid() {\n      return this.isUserEmailFocus && !this.isUserEmailValid;\n    },\n    isUserPasswordFocusAndValid: function isUserPasswordFocusAndValid() {\n      return this.isUserPasswordFocus && this.isUserPasswordValid;\n    },\n    isUserPasswordFocusAndInvalid: function isUserPasswordFocusAndInvalid() {\n      return this.isUserPasswordFocus && !this.isUserPasswordValid;\n    },\n    isUserPassword2FocusAndValid: function isUserPassword2FocusAndValid() {\n      return this.isUserPassword2Focus && this.isUserPassword2Valid;\n    },\n    isUserPassword2FocusAndInvalid: function isUserPassword2FocusAndInvalid() {\n      return this.isUserPassword2Focus && !this.isUserPassword2Valid;\n    }\n  },\n  methods: {\n    validateUserName: function validateUserName() {\n      this.isUserNameValid = this.userName.length > 0 ? true : false;\n      console.log(this.isUserNameValid);\n    },\n    validateEmail: function validateEmail() {\n      // ^ 시작일치, $ 끝 일치\n      // {2, 3} 2개 ~ 3개\n      // * 0회 이상, + 1회 이상\n      // [-_.] - 또는 _ 또는 .\n      // ? 없거나 1회\n      var regexp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n      this.isUserEmailValid = regexp.test(this.userEmail) ? true : false;\n      console.log(this.isUserEmailValid);\n    },\n    validatePassword: function validatePassword() {\n      var patternEngAtListOne = new RegExp(/[a-zA-Z]+/); // + for at least one\n\n      var patternSpeAtListOne = new RegExp(/[~!@#$%^&*()_+|<>?:{}]+/); // + for at least one\n\n      var patternNumAtListOne = new RegExp(/[0-9]+/); // + for at least one\n\n      this.isUserPasswordValid = patternEngAtListOne.test(this.userPassword) && patternSpeAtListOne.test(this.userPassword) && patternNumAtListOne.test(this.userPassword) && this.userPassword.length >= 8 ? true : false;\n    },\n    validatePassword2: function validatePassword2() {\n      this.isUserPassword2Valid = this.userPassword == this.userPassword2 ? true : false;\n    },\n    register: function register() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var registerObj, _yield$http$post, data, $this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!_this.isUserEmailValid || !_this.isUserPasswordValid || !_this.isUserPassword2Valid)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                registerObj = {\n                  userName: _this.userName,\n                  userEmail: _this.userEmail,\n                  userPassword: _this.userPassword\n                };\n                _context.prev = 3;\n                console.log(registerObj);\n                _context.next = 7;\n                return http.post(\"/user\", registerObj);\n\n              case 7:\n                _yield$http$post = _context.sent;\n                data = _yield$http$post.data;\n                // JSON Request, { params : registerObj } X params 를 쓰면 get => query string\n                console.log(\"RegisterVue: data : \");\n                console.log(data);\n\n                if (data.result == \"success\") {\n                  $this = _this;\n\n                  _this.$alertify.alert(\"회원가입을 축하합니다. 로그인 페이지로 이동합니다\", function () {\n                    $this.$router.push(\"/login\");\n                  });\n                } else {\n                  console.log(\"RegisterVue: error : \");\n\n                  _this.$alertify.error(\"서버에 문제가 발생했습니다.\");\n                }\n\n                _context.next = 19;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(\"RegisterVue: error : \");\n                console.log(_context.t0);\n\n                _this.$alertify.error(\"서버에 문제가 발생했습니다.\");\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 14]]);\n      }))();\n    },\n    onClickCheckboxHandler: function onClickCheckboxHandler() {\n      if (!this.checked) {\n        //alert(\"체크됨\");\n        var recPwd = this.recPwdMake();\n        alert(\"추천 비밀번호: \" + recPwd);\n        this.userPassword = recPwd;\n        this.userPassword2 = recPwd;\n      } else {\n        //alert(\"체크 해제됨\");\n        this.userPassword = \"\";\n        this.userPassword2 = \"\";\n      }\n    },\n    //추천 암호 만들기\n    recPwdMake: function recPwdMake() {\n      //특문 몇개 뽑아오기, 숫자 몇개 뽑아오기, 알파벳 몇개 뽑기\n      var starNum = Math.floor(Math.random() * 8) + 2; //랜덤으로 특문에서 몇개 뽑아올지 정하기\n\n      var numberNum = Math.floor(Math.random() * 8) + 2; //랜덤으로 숫자에서 몇개 뽑아올지 정하기(0~10)\n\n      var alpaNum = 8; // 랜덤으로 알파벳 중에 8개 뽑기\n\n      var starText = [\"~\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"_\", \"+\", \"|\", \"<\", \">\", \"?\", \":\", \"{\", \"}\", \"]\", \"+\", \"/\"];\n      var alpaArr = [];\n\n      for (var a = 65; a <= 90; a++) {\n        alpaArr.push(a);\n        alpaArr.push(a + 32);\n      } //랜덤으로 정해진 개수만큼 뽑아오기\n\n\n      var pwdArr = [];\n\n      for (var i = 0; i < alpaNum; i++) {\n        pwdArr.push(String.fromCharCode(alpaArr[Math.floor(Math.random() * 10)]));\n      }\n\n      for (var i = 0; i < numberNum; i++) {\n        pwdArr.push(Math.floor(Math.random() * 10));\n      }\n\n      for (var i = 0; i < starNum; i++) {\n        pwdArr.push(starText[Math.floor(Math.random() * starText.length)]);\n      } //분할정복으로 비밀번호 정하기\n\n\n      var pwd = this.divideConquer(pwdArr);\n      return pwd.join(\"\");\n    },\n    divideConquer: function divideConquer(pwdArr) {\n      if (pwdArr.length == 1) return pwdArr;\n      var middleIdx = pwdArr.length / 2; //나눌 인덱스\n\n      var conquerPwd = []; //나누고 합칠 배열\n\n      var onePwd = this.divideConquer(pwdArr.slice(0, middleIdx)); //나눴을 때의 첫번째 배열\n\n      var twoPwd = this.divideConquer(pwdArr.slice(middleIdx)); //나눴을 때의 두번째 배열\n\n      var type = Math.floor(Math.random() * 2); //0이면 순서 그대로, 1이면 순서 뒤집기\n\n      if (type == 0) return onePwd.concat(twoPwd);else return twoPwd.concat(onePwd);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Vue","data","userName","userEmail","userPassword","userPassword2","isUserNameFocus","isUserEmailFocus","isUserPasswordFocus","isUserPassword2Focus","isUserNameValid","isUserEmailValid","isUserPasswordValid","isUserPassword2Valid","groupCode","codeList","userClsf","checked","computed","isUserNameFocusAndValid","isUserNameFocusAndInvalid","isUserEmailFocusAndValid","isUserEmailFocusAndInValid","isUserPasswordFocusAndValid","isUserPasswordFocusAndInvalid","isUserPassword2FocusAndValid","isUserPassword2FocusAndInvalid","methods","validateUserName","console","validateEmail","validatePassword","patternEngAtListOne","patternSpeAtListOne","patternNumAtListOne","validatePassword2","register","registerObj","http","$this","onClickCheckboxHandler","alert","recPwdMake","alpaArr","pwdArr","String","divideConquer"],"sourceRoot":"src/views","sources":["RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"mb-3 d-flex justify-content-center\">\r\n      <h1 class=\"display-4\">\r\n        <a href=\"/\" style=\"text-decoration: none; color: black\">HAPPY HOUSE</a>\r\n      </h1>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <h2>Register</h2>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"userName\">User Name:</label>\r\n      <input\r\n        type=\"name\"\r\n        class=\"form-control\"\r\n        placeholder=\"Enter User Name\"\r\n        :class=\"{\r\n          'is-valid': isUserNameFocusAndValid,\r\n          'is-invalid': isUserNameFocusAndInvalid,\r\n        }\"\r\n        v-model=\"userName\"\r\n        @input=\"validateUserName\"\r\n        @focus=\"isUserNameFocus = true\"\r\n      />\r\n      <div class=\"valid-feedback\">Valid.</div>\r\n      <div class=\"invalid-feedback\">올바른 이름을 입력해 주세요.</div>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"userEmail\">Email:</label>\r\n      <!-- 각각의 input 이 focus 를 가진 경우에만 반응하도록 해야하고, click 할 때마다 valid 확인 필요 -->\r\n      <input\r\n        type=\"email\"\r\n        class=\"form-control\"\r\n        placeholder=\"Enter Email\"\r\n        :class=\"{\r\n          'is-valid': isUserEmailFocusAndValid,\r\n          'is-invalid': isUserEmailFocusAndInValid,\r\n        }\"\r\n        v-model=\"userEmail\"\r\n        @input=\"validateEmail\"\r\n        @focus=\"isUserEmailFocus = true\"\r\n      />\r\n      <!-- 테스트 코드 -->\r\n      <!-- {{isUserEmailFocus}} - {{ isUserEmailFocusAndValid }} - {{ isUserEmailFocusAndInValid }} -->\r\n      <div class=\"valid-feedback\">Valid.</div>\r\n      <div class=\"invalid-feedback\">올바른 Email 을 입력해 주세요.</div>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"userPassword\">Password:</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"Enter Password\"\r\n        :class=\"{\r\n          'is-valid': isUserPasswordFocusAndValid,\r\n          'is-invalid': isUserPasswordFocusAndInvalid,\r\n        }\"\r\n        v-model=\"userPassword\"\r\n        @input=\"validatePassword\"\r\n        @focus=\"isUserPasswordFocus = true\"\r\n      />\r\n      <div class=\"form-check\" style=\"margin-left: auto\">\r\n        <input\r\n          class=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          v-model=\"checked\"\r\n          @click=\"onClickCheckboxHandler()\"\r\n          id=\"useRecommendPassword\"\r\n        />\r\n        <label class=\"form-check-label\" for=\"flexCheckDefault\">\r\n          Recommend Password\r\n        </label>\r\n      </div>\r\n      <div class=\"valid-feedback\">Valid.</div>\r\n      <div class=\"invalid-feedback\">\r\n        1개 이상의 특수문자, 대소문자 및 숫자를 포함하고 8자리 이상이여야\r\n        합니다.\r\n      </div>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"userPassword2\">Password Confirm:</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"Conform Password\"\r\n        :class=\"{\r\n          'is-valid': isUserPassword2FocusAndValid,\r\n          'is-invalid': isUserPassword2FocusAndInvalid,\r\n        }\"\r\n        v-model=\"userPassword2\"\r\n        @input=\"validatePassword2\"\r\n        @focus=\"isUserPassword2Focus = true\"\r\n      />\r\n      <div class=\"valid-feedback\">Valid.</div>\r\n      <div class=\"invalid-feedback\">비밀번호가 일치하지 않습니다.</div>\r\n    </div>\r\n\r\n    <div class=\"mb-3\">\r\n      <div\r\n        class=\"form-check form-check-inline\"\r\n        v-for=\"(code, index) in codeList\"\r\n        :key=\"index\"\r\n      >\r\n        <input\r\n          class=\"form-check-input\"\r\n          :value=\"code.code\"\r\n          type=\"radio\"\r\n          v-model=\"userClsf\"\r\n        />\r\n        <label class=\"form-check-label\">{{ code.codeName }}</label>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <button @click=\"register\" class=\"btn btn-primary\">가입하기</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\nimport VueAlertify from \"vue-alertify\";\r\nVue.use(VueAlertify);\r\n\r\nimport http from \"@/api/http.js\";\r\n\r\nexport default {\r\n  // data 사용 X\r\n  data() {\r\n    return {\r\n      // v-model\r\n      userName: \"\",\r\n      userEmail: \"\",\r\n      userPassword: \"\",\r\n      userPassword2: \"\",\r\n\r\n      // focus\r\n      isUserNameFocus: false,\r\n      isUserEmailFocus: false,\r\n      isUserPasswordFocus: false,\r\n      isUserPassword2Focus: false,\r\n\r\n      // validation\r\n      isUserNameValid: false,\r\n      isUserEmailValid: false,\r\n      isUserPasswordValid: false,\r\n      isUserPassword2Valid: false,\r\n\r\n      // 회원 구분\r\n      groupCode: \"001\",\r\n      codeList: [],\r\n      userClsf: \"001\", // 일반회원 default\r\n\r\n      checked: false,\r\n    };\r\n  },\r\n  computed: {\r\n    isUserNameFocusAndValid() {\r\n      return this.isUserNameFocus && this.isUserNameValid;\r\n    },\r\n    isUserNameFocusAndInvalid() {\r\n      return this.isUserNameFocus && !this.isUserNameValid;\r\n    },\r\n    isUserEmailFocusAndValid() {\r\n      return this.isUserEmailFocus && this.isUserEmailValid;\r\n    },\r\n    isUserEmailFocusAndInValid() {\r\n      return this.isUserEmailFocus && !this.isUserEmailValid;\r\n    },\r\n    isUserPasswordFocusAndValid() {\r\n      return this.isUserPasswordFocus && this.isUserPasswordValid;\r\n    },\r\n    isUserPasswordFocusAndInvalid() {\r\n      return this.isUserPasswordFocus && !this.isUserPasswordValid;\r\n    },\r\n    isUserPassword2FocusAndValid() {\r\n      return this.isUserPassword2Focus && this.isUserPassword2Valid;\r\n    },\r\n    isUserPassword2FocusAndInvalid() {\r\n      return this.isUserPassword2Focus && !this.isUserPassword2Valid;\r\n    },\r\n  },\r\n  methods: {\r\n    validateUserName() {\r\n      this.isUserNameValid = this.userName.length > 0 ? true : false;\r\n      console.log(this.isUserNameValid);\r\n    },\r\n    validateEmail() {\r\n      // ^ 시작일치, $ 끝 일치\r\n      // {2, 3} 2개 ~ 3개\r\n      // * 0회 이상, + 1회 이상\r\n      // [-_.] - 또는 _ 또는 .\r\n      // ? 없거나 1회\r\n      let regexp =\r\n        /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n      this.isUserEmailValid = regexp.test(this.userEmail) ? true : false;\r\n      console.log(this.isUserEmailValid);\r\n    },\r\n    validatePassword() {\r\n      let patternEngAtListOne = new RegExp(/[a-zA-Z]+/); // + for at least one\r\n      let patternSpeAtListOne = new RegExp(/[~!@#$%^&*()_+|<>?:{}]+/); // + for at least one\r\n      let patternNumAtListOne = new RegExp(/[0-9]+/); // + for at least one\r\n\r\n      this.isUserPasswordValid =\r\n        patternEngAtListOne.test(this.userPassword) &&\r\n        patternSpeAtListOne.test(this.userPassword) &&\r\n        patternNumAtListOne.test(this.userPassword) &&\r\n        this.userPassword.length >= 8\r\n          ? true\r\n          : false;\r\n    },\r\n    validatePassword2() {\r\n      this.isUserPassword2Valid =\r\n        this.userPassword == this.userPassword2 ? true : false;\r\n    },\r\n    async register() {\r\n      if (\r\n        !this.isUserEmailValid ||\r\n        !this.isUserPasswordValid ||\r\n        !this.isUserPassword2Valid\r\n      )\r\n        return;\r\n\r\n      let registerObj = {\r\n        userName: this.userName,\r\n        userEmail: this.userEmail,\r\n        userPassword: this.userPassword,\r\n      };\r\n      try {\r\n        console.log(registerObj);\r\n        let { data } = await http.post(\"/user\", registerObj); // JSON Request, { params : registerObj } X params 를 쓰면 get => query string\r\n        console.log(\"RegisterVue: data : \");\r\n        console.log(data);\r\n\r\n        if (data.result == \"success\") {\r\n          let $this = this;\r\n          this.$alertify.alert(\r\n            \"회원가입을 축하합니다. 로그인 페이지로 이동합니다\",\r\n            function () {\r\n              $this.$router.push(\"/login\");\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\"RegisterVue: error : \");\r\n          this.$alertify.error(\"서버에 문제가 발생했습니다.\");\r\n        }\r\n      } catch (error) {\r\n        console.log(\"RegisterVue: error : \");\r\n        console.log(error);\r\n        this.$alertify.error(\"서버에 문제가 발생했습니다.\");\r\n      }\r\n    },\r\n    onClickCheckboxHandler() {\r\n      if (!this.checked) {\r\n        //alert(\"체크됨\");\r\n        let recPwd = this.recPwdMake();\r\n        alert(\"추천 비밀번호: \" + recPwd);\r\n\r\n        this.userPassword = recPwd;\r\n        this.userPassword2 = recPwd;\r\n      } else {\r\n        //alert(\"체크 해제됨\");\r\n        this.userPassword = \"\";\r\n        this.userPassword2 = \"\";\r\n      }\r\n    },\r\n\r\n    //추천 암호 만들기\r\n    recPwdMake() {\r\n      //특문 몇개 뽑아오기, 숫자 몇개 뽑아오기, 알파벳 몇개 뽑기\r\n      var starNum = Math.floor(Math.random() * 8) + 2; //랜덤으로 특문에서 몇개 뽑아올지 정하기\r\n      var numberNum = Math.floor(Math.random() * 8) + 2; //랜덤으로 숫자에서 몇개 뽑아올지 정하기(0~10)\r\n      var alpaNum = 8; // 랜덤으로 알파벳 중에 8개 뽑기\r\n\r\n      var starText = [\r\n        \"~\",\r\n        \"!\",\r\n        \"@\",\r\n        \"#\",\r\n        \"$\",\r\n        \"%\",\r\n        \"^\",\r\n        \"&\",\r\n        \"*\",\r\n        \"(\",\r\n        \")\",\r\n        \"_\",\r\n        \"+\",\r\n        \"|\",\r\n        \"<\",\r\n        \">\",\r\n        \"?\",\r\n        \":\",\r\n        \"{\",\r\n        \"}\",\r\n        \"]\",\r\n        \"+\",\r\n        \"/\",\r\n      ];\r\n      var alpaArr = [];\r\n      for (var a = 65; a <= 90; a++) {\r\n        alpaArr.push(a);\r\n        alpaArr.push(a + 32);\r\n      }\r\n\r\n      //랜덤으로 정해진 개수만큼 뽑아오기\r\n      var pwdArr = [];\r\n      for (var i = 0; i < alpaNum; i++) {\r\n        pwdArr.push(\r\n          String.fromCharCode(alpaArr[Math.floor(Math.random() * 10)])\r\n        );\r\n      }\r\n      for (var i = 0; i < numberNum; i++) {\r\n        pwdArr.push(Math.floor(Math.random() * 10));\r\n      }\r\n      for (var i = 0; i < starNum; i++) {\r\n        pwdArr.push(starText[Math.floor(Math.random() * starText.length)]);\r\n      }\r\n\r\n      //분할정복으로 비밀번호 정하기\r\n      var pwd = this.divideConquer(pwdArr);\r\n      return pwd.join(\"\");\r\n    },\r\n\r\n    divideConquer(pwdArr) {\r\n      if (pwdArr.length == 1) return pwdArr;\r\n\r\n      var middleIdx = pwdArr.length / 2; //나눌 인덱스\r\n      var conquerPwd = []; //나누고 합칠 배열\r\n\r\n      var onePwd = this.divideConquer(pwdArr.slice(0, middleIdx)); //나눴을 때의 첫번째 배열\r\n      var twoPwd = this.divideConquer(pwdArr.slice(middleIdx)); //나눴을 때의 두번째 배열\r\n\r\n      var type = Math.floor(Math.random() * 2); //0이면 순서 그대로, 1이면 순서 뒤집기\r\n\r\n      if (type == 0) return onePwd.concat(twoPwd);\r\n      else return twoPwd.concat(onePwd);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}