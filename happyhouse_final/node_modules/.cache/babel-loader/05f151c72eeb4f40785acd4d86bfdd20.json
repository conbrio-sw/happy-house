{"ast":null,"code":"import _asyncToGenerator from \"C:/SSAFY/workspace/vuejs/happyhouse_final/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport CKEditor from \"@ckeditor/ckeditor5-vue2\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport VueAlertify from \"vue-alertify\";\nVue.use(CKEditor).use(VueAlertify);\nimport http from \"@/api/http.js\";\nexport default {\n  name: \"InsertModal\",\n  // data 가 최초 발생하는 곳이므로 store 를 사용하지 않아도 됨.\n  data: function data() {\n    return {\n      title: \"\",\n      CKEditor: \"\",\n      attachFile: false,\n      fileList: []\n    };\n  },\n  methods: {\n    // modal 초기화\n    initUI: function initUI() {\n      this.title = \"\";\n      this.CKEditor.setData(\"\");\n      this.attachFile = false;\n      this.fileList = [];\n      document.querySelector(\"#inputFileUploadInsert\").value = \"\";\n    },\n    changeFile: function changeFile(fileEvent) {\n      var _this = this;\n\n      this.fileList = []; // thumbnail 초기화\n\n      var fileArray = Array.from(fileEvent.target.files);\n      fileArray.forEach(function (file) {\n        _this.fileList.push(URL.createObjectURL(file)); // push : array 에 항목 추가\n\n      });\n    },\n    // 굳이 actions 에 있을 필요 없다. backend async 작업이지만, 그 결과로 store 를 변경하는 내용이 없다.\n    boardInsert: function boardInsert() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var formData, attachFiles, fileArray, options, _yield$http$post, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                formData = new FormData();\n                formData.append(\"title\", _this2.title);\n                formData.append(\"content\", _this2.CKEditor.getData()); // file upload\n\n                attachFiles = document.querySelector(\"#inputFileUploadInsert\").files;\n\n                if (attachFiles.length > 0) {\n                  fileArray = Array.from(attachFiles);\n                  fileArray.forEach(function (file) {\n                    return formData.append(\"file\", file);\n                  });\n                }\n\n                options = {\n                  headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                  }\n                };\n                _context.prev = 6;\n                _context.next = 9;\n                return http.post(\"/boards\", formData, options);\n\n              case 9:\n                _yield$http$post = _context.sent;\n                data = _yield$http$post.data;\n                console.log(\"InsertModalVue: data : \");\n                console.log(data);\n\n                if (data.result == \"login\") {\n                  _this2.doLogout();\n                } else {\n                  _this2.$alertify.success(\"글이 등록되었습니다.\");\n\n                  _this2.closeModal();\n                }\n\n                _context.next = 20;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](6);\n                console.log(\"InsertModalVue: error \");\n                console.log(_context.t0);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[6, 16]]);\n      }))();\n    },\n    closeModal: function closeModal() {\n      this.$emit(\"call-parent-insert\"); // no parameter\n    },\n    // logout 처리 별도 method\n    doLogout: function doLogout() {\n      this.$store.commit(\"SET_LOGIN\", {\n        isLogin: false,\n        userName: \"\",\n        userProfileImageUrl: \"\"\n      });\n      this.$router.push(\"/login\");\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var $this;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return ClassicEditor.create(document.querySelector(\"#divEditorInsert\"));\n\n            case 3:\n              _this3.CKEditor = _context2.sent;\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 9:\n              // bootstrap modal show event hook\n              // InsertModal 이 보일 때 초기화\n              $this = _this3;\n\n              _this3.$el.addEventListener(\"show.bs.modal\", function () {\n                $this.initUI();\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }))();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AACA;AACA;AACA;AAEAA;AAEA;AAEA;EACAC,mBADA;EAEA;EACAC,IAHA,kBAGA;IACA;MACAC,SADA;MAEAC,YAFA;MAGAC,iBAHA;MAIAC;IAJA;EAMA,CAVA;EAWAC;IACA;IACAC,MAFA,oBAEA;MACA;MACA;MACA;MACA;MACAC;IACA,CARA;IASAC,UATA,sBASAC,SATA,EASA;MAAA;;MACA,mBADA,CACA;;MAEA;MACAC;QACA,+CADA,CACA;;MACA,CAFA;IAGA,CAhBA;IAiBA;IACAC,WAlBA,yBAkBA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACAC,QADA,GACA,cADA;gBAEAA;gBACAA,sDAHA,CAKA;;gBACAC,WANA,GAMAN,sDANA;;gBAQA;kBACAG,SADA,GACAI,uBADA;kBAEAJ;oBAAA;kBAAA;gBACA;;gBAEAK,OAbA,GAaA;kBACAC;oBAAA;kBAAA;gBADA,CAbA;gBAAA;gBAAA;gBAAA,OAkBAC,uCAlBA;;cAAA;gBAAA;gBAkBAjB,IAlBA,oBAkBAA,IAlBA;gBAoBAkB;gBACAA;;gBACA;kBACA;gBACA,CAFA,MAEA;kBACA;;kBACA;gBACA;;gBA3BA;gBAAA;;cAAA;gBAAA;gBAAA;gBA6BAA;gBACAA;;cA9BA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAgCA,CAlDA;IAmDAC,UAnDA,wBAmDA;MACA,iCADA,CACA;IACA,CArDA;IAsDA;IACAC,QAvDA,sBAuDA;MACA;QACAC,cADA;QAEAC,YAFA;QAGAC;MAHA;MAKA;IACA;EA9DA,CAXA;EA2EAC,OA3EA,qBA2EA;IAAA;;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEAC,qBACAlB,0CADA,CAFA;;YAAA;cAEA,eAFA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAMAW;;YANA;cASA;cACA;cACAQ,KAXA,GAWA,MAXA;;cAYA;gBACAA;cACA,CAFA;;YAZA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAeA;AA1FA","names":["Vue","name","data","title","CKEditor","attachFile","fileList","methods","initUI","document","changeFile","fileEvent","fileArray","boardInsert","formData","attachFiles","Array","options","headers","http","console","closeModal","doLogout","isLogin","userName","userProfileImageUrl","mounted","ClassicEditor","$this"],"sourceRoot":"src/components/modals","sources":["InsertModal.vue"],"sourcesContent":["<template>\r\n  <div class=\"modal\" tabindex=\"-1\" id=\"insertModal\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">글 쓰기</h5>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn-close\"\r\n            data-bs-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          ></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"mb-3\">\r\n            <input\r\n              v-model=\"title\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"제목\"\r\n            />\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <div id=\"divEditorInsert\"></div>\r\n          </div>\r\n          <div class=\"form-check mb-3\">\r\n            <input\r\n              v-model=\"attachFile\"\r\n              class=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              value=\"\"\r\n              id=\"chkFileUploadInsert\"\r\n            />\r\n            <label class=\"form-check-label\" for=\"chkFileUploadInsert\"\r\n              >파일 추가</label\r\n            >\r\n          </div>\r\n          <div class=\"mb-3\" v-show=\"attachFile\" id=\"imgFileUploadInsertWrapper\">\r\n            <input\r\n              @change=\"changeFile\"\r\n              type=\"file\"\r\n              id=\"inputFileUploadInsert\"\r\n              multiple\r\n            />\r\n            <div id=\"imgFileUploadInsertThumbnail\" class=\"thumbnail-wrapper\">\r\n              <!-- vue way img 를 만들어서 append 하지 않고, v-for 로 처리 -->\r\n              <img\r\n                v-for=\"(file, index) in fileList\"\r\n                v-bind:src=\"file\"\r\n                v-bind:key=\"index\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button\r\n            @click=\"boardInsert\"\r\n            class=\"btn btn-sm btn-primary btn-outline\"\r\n            data-dismiss=\"modal\"\r\n            type=\"button\"\r\n          >\r\n            등록\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\nimport CKEditor from \"@ckeditor/ckeditor5-vue2\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport VueAlertify from \"vue-alertify\";\r\n\r\nVue.use(CKEditor).use(VueAlertify);\r\n\r\nimport http from \"@/api/http.js\";\r\n\r\nexport default {\r\n  name: \"InsertModal\",\r\n  // data 가 최초 발생하는 곳이므로 store 를 사용하지 않아도 됨.\r\n  data() {\r\n    return {\r\n      title: \"\",\r\n      CKEditor: \"\",\r\n      attachFile: false,\r\n      fileList: [],\r\n    };\r\n  },\r\n  methods: {\r\n    // modal 초기화\r\n    initUI() {\r\n      this.title = \"\";\r\n      this.CKEditor.setData(\"\");\r\n      this.attachFile = false;\r\n      this.fileList = [];\r\n      document.querySelector(\"#inputFileUploadInsert\").value = \"\";\r\n    },\r\n    changeFile(fileEvent) {\r\n      this.fileList = []; // thumbnail 초기화\r\n\r\n      const fileArray = Array.from(fileEvent.target.files);\r\n      fileArray.forEach((file) => {\r\n        this.fileList.push(URL.createObjectURL(file)); // push : array 에 항목 추가\r\n      });\r\n    },\r\n    // 굳이 actions 에 있을 필요 없다. backend async 작업이지만, 그 결과로 store 를 변경하는 내용이 없다.\r\n    async boardInsert() {\r\n      let formData = new FormData();\r\n      formData.append(\"title\", this.title);\r\n      formData.append(\"content\", this.CKEditor.getData());\r\n\r\n      // file upload\r\n      let attachFiles = document.querySelector(\"#inputFileUploadInsert\").files;\r\n\r\n      if (attachFiles.length > 0) {\r\n        const fileArray = Array.from(attachFiles);\r\n        fileArray.forEach((file) => formData.append(\"file\", file));\r\n      }\r\n\r\n      let options = {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      };\r\n\r\n      try {\r\n        let { data } = await http.post(\"/boards\", formData, options);\r\n\r\n        console.log(\"InsertModalVue: data : \");\r\n        console.log(data);\r\n        if (data.result == \"login\") {\r\n          this.doLogout();\r\n        } else {\r\n          this.$alertify.success(\"글이 등록되었습니다.\");\r\n          this.closeModal();\r\n        }\r\n      } catch (error) {\r\n        console.log(\"InsertModalVue: error \");\r\n        console.log(error);\r\n      }\r\n    },\r\n    closeModal() {\r\n      this.$emit(\"call-parent-insert\"); // no parameter\r\n    },\r\n    // logout 처리 별도 method\r\n    doLogout() {\r\n      this.$store.commit(\"SET_LOGIN\", {\r\n        isLogin: false,\r\n        userName: \"\",\r\n        userProfileImageUrl: \"\",\r\n      });\r\n      this.$router.push(\"/login\");\r\n    },\r\n  },\r\n  async mounted() {\r\n    try {\r\n      this.CKEditor = await ClassicEditor.create(\r\n        document.querySelector(\"#divEditorInsert\")\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n    // bootstrap modal show event hook\r\n    // InsertModal 이 보일 때 초기화\r\n    let $this = this;\r\n    this.$el.addEventListener(\"show.bs.modal\", function () {\r\n      $this.initUI();\r\n    });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.modal >>> .ck-editor__editable {\r\n  min-height: 300px !important;\r\n}\r\n\r\n.modal >>> .thumbnail-wrapper {\r\n  margin-top: 5px;\r\n}\r\n\r\n.modal >>> .thumbnail-wrapper img {\r\n  width: 100px !important;\r\n  margin-right: 5px;\r\n  max-width: 100%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}