{"ast":null,"code":"import _asyncToGenerator from \"C:/SSAFY/workspace/vuejs/happyhouse_final/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport CKEditor from \"@ckeditor/ckeditor5-vue2\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport VueAlertify from \"vue-alertify\";\nVue.use(CKEditor).use(VueAlertify);\nimport http from \"@/api/http.js\";\nexport default {\n  name: \"UpdateModal\",\n  // props: [\"board\"],\n  // data 는 CKEditor, attachFile, fileList UI 관련 3개만\n  data: function data() {\n    return {\n      CKEditor: \"\",\n      attachFile: false,\n      fileList: [] // store 의 fileList 와 구분됨. 새로 첨부되는 파일을 위한.\n\n    };\n  },\n  // v-model -title\n  computed: {\n    storeTitle: {\n      get: function get() {\n        return this.$store.state.board.title;\n      },\n      set: function set(title) {\n        this.$store.commit(\"SET_BOARD_TITLE\", title);\n      }\n    }\n  },\n  methods: {\n    // modal 초기화\n    initUI: function initUI() {\n      this.CKEditor.setData(this.$store.state.board.content);\n      this.attachFile = false;\n      this.fileList = [];\n      document.querySelector(\"#inputFileUploadUpdate\").value = \"\";\n    },\n    changeFile: function changeFile(fileEvent) {\n      var _this = this;\n\n      this.fileList = []; // thumbnail 초기화\n\n      var fileArray = Array.from(fileEvent.target.files);\n      fileArray.forEach(function (file) {\n        _this.fileList.push(URL.createObjectURL(file)); // push : array 에 항목 추가\n\n      });\n    },\n    // 굳이 actions 에 있을 필요 없다. backend async 작업이지만, 그 결과로 store 를 변경하는 내용이 없다.\n    boardUpdate: function boardUpdate() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var formData, attachFiles, fileArray, options, _yield$http$post, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // post form data\n                formData = new FormData();\n                formData.append(\"boardId\", _this2.$store.state.board.boardId); // update 에 추가\n\n                formData.append(\"title\", _this2.$store.state.board.title);\n                formData.append(\"content\", _this2.CKEditor.getData()); // store X !!!!\n                // file upload\n\n                attachFiles = document.querySelector(\"#inputFileUploadUpdate\").files;\n\n                if (attachFiles.length > 0) {\n                  fileArray = Array.from(attachFiles);\n                  fileArray.forEach(function (file) {\n                    return formData.append(\"file\", file);\n                  });\n                }\n\n                options = {\n                  headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                  }\n                }; // not put, REST but FileUpload\n\n                _context.prev = 7;\n                _context.next = 10;\n                return http.post(\"/boards/\" + _this2.$store.state.board.boardId, formData, options);\n\n              case 10:\n                _yield$http$post = _context.sent;\n                data = _yield$http$post.data;\n                console.log(\"UpdateModalVue: data : \");\n                console.log(data);\n\n                if (data.result == \"login\") {\n                  _this2.doLogout();\n                } else {\n                  _this2.$alertify.success(\"글이 수정되었습니다.\");\n\n                  _this2.closeModal();\n                }\n\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](7);\n                console.log(\"UpdateModalVue: error \");\n                console.log(_context.t0);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[7, 17]]);\n      }))();\n    },\n    closeModal: function closeModal() {\n      this.$emit(\"call-parent-update\"); // no parameter\n    },\n    // logout 처리 별도 method\n    doLogout: function doLogout() {\n      this.$store.commit(\"SET_LOGIN\", {\n        isLogin: false,\n        userName: \"\",\n        userProfileImageUrl: \"\"\n      });\n      this.$router.push(\"/login\");\n    }\n  },\n  // modal.show() 이전에 이미 mounted() 호출됨\n  mounted: function mounted() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var $this;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return ClassicEditor.create(document.querySelector(\"#divEditorUpdate\"));\n\n            case 3:\n              _this3.CKEditor = _context2.sent;\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 9:\n              // bootstrap modal show event hook\n              // UpdateModal 이 보일 때 초기화\n              $this = _this3;\n\n              _this3.$el.addEventListener(\"show.bs.modal\", function () {\n                $this.initUI();\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }))();\n  } // watch 사용 X\n  // props 사용 X\n  // watch: {\n  //   board : function(){\n  //     // props --> data\n  //     this.boardId = this.board.boardId;\n  //     this.title = this.board.title;\n  //     this.CKEditor.setData( this.board.content );\n  //     // 아래의 내용을 추가하지 않음\n  //     // 기존 파일 내용은 props - board 를 이용\n  //     // fileList 는 신규 파일에 적용\n  //     //this.fileList = this.board.fileList;\n  //     // 첨부 파일 관련 초기화\n  //     // 수정 또는 수정 전 첨부 파일을 선택하면 그대로 남아 있다.\n  //     this.attachFile = false;\n  //     this.fileList = [];\n  //   }\n  // }\n\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AACA;AACA;AACA;AAEAA;AAEA;AAEA;EACAC,mBADA;EAEA;EACA;EACAC,IAJA,kBAIA;IACA;MACAC,YADA;MAEAC,iBAFA;MAGAC,YAHA,CAGA;;IAHA;EAKA,CAVA;EAWA;EACAC;IACAC;MACAC,GADA,iBACA;QACA;MACA,CAHA;MAIAC,GAJA,eAIAC,KAJA,EAIA;QACA;MACA;IANA;EADA,CAZA;EAsBAC;IACA;IACAC,MAFA,oBAEA;MACA;MACA;MACA;MACAC;IACA,CAPA;IAQAC,UARA,sBAQAC,SARA,EAQA;MAAA;;MACA,mBADA,CACA;;MAEA;MACAC;QACA,+CADA,CACA;;MACA,CAFA;IAGA,CAfA;IAgBA;IACAC,WAjBA,yBAiBA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACA;gBACAC,QAFA,GAEA,cAFA;gBAGAA,8DAHA,CAGA;;gBACAA;gBACAA,sDALA,CAKA;gBAEA;;gBACAC,WARA,GAQAN,sDARA;;gBAUA;kBACAG,SADA,GACAI,uBADA;kBAEAJ;oBAAA;kBAAA;gBACA;;gBAEAK,OAfA,GAeA;kBACAC;oBAAA;kBAAA;gBADA,CAfA,EAmBA;;gBAnBA;gBAAA;gBAAA,OAqBAC,UACA,8CADA,EAEAL,QAFA,EAGAG,OAHA,CArBA;;cAAA;gBAAA;gBAqBAnB,IArBA,oBAqBAA,IArBA;gBA2BAsB;gBACAA;;gBACA;kBACA;gBACA,CAFA,MAEA;kBACA;;kBACA;gBACA;;gBAlCA;gBAAA;;cAAA;gBAAA;gBAAA;gBAoCAA;gBACAA;;cArCA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAuCA,CAxDA;IAyDAC,UAzDA,wBAyDA;MACA,iCADA,CACA;IACA,CA3DA;IA4DA;IACAC,QA7DA,sBA6DA;MACA;QACAC,cADA;QAEAC,YAFA;QAGAC;MAHA;MAKA;IACA;EApEA,CAtBA;EA4FA;EACAC,OA7FA,qBA6FA;IAAA;;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEAC,qBACAlB,0CADA,CAFA;;YAAA;cAEA,eAFA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAMAW;;YANA;cASA;cACA;cACAQ,KAXA,GAWA,MAXA;;cAYA;gBACAA;cACA,CAFA;;YAZA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAeA,CA5GA,CA6GA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;;AA/HA","names":["Vue","name","data","CKEditor","attachFile","fileList","computed","storeTitle","get","set","title","methods","initUI","document","changeFile","fileEvent","fileArray","boardUpdate","formData","attachFiles","Array","options","headers","http","console","closeModal","doLogout","isLogin","userName","userProfileImageUrl","mounted","ClassicEditor","$this"],"sourceRoot":"src/components/modals","sources":["UpdateModal.vue"],"sourcesContent":["<template>\n  <div class=\"modal\" tabindex=\"-1\" id=\"updateModal\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\">글 수정</h5>\n          <button\n            type=\"button\"\n            class=\"btn-close\"\n            data-bs-dismiss=\"modal\"\n            aria-label=\"Close\"\n          ></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"mb-3\">\n            <!-- v-model 을 store 와 직접 연결하기 보다 computed-get-set 을 사용(strict mode 에서는 오류 발생) -->\n            <!-- <input v-model=\"$store.state.board.title\" type=\"text\" class=\"form-control\" placeholder=\"제목\"> -->\n            <input\n              v-model=\"storeTitle\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"제목\"\n            />\n          </div>\n          <div class=\"mb-3\">\n            <div id=\"divEditorUpdate\"></div>\n          </div>\n          <!-- 기존 파일 내용 보여줌  -->\n          <!-- 새로운 첨부파일은 data-fileList 로 -->\n          <div v-if=\"$store.state.board.fileList.length > 0\" class=\"mb-3\">\n            첨부파일 :\n            <span\n              ><div\n                v-for=\"(file, index) in $store.state.board.fileList\"\n                class=\"fileName\"\n                :key=\"index\"\n              >\n                {{ file.fileName }}\n              </div></span\n            >\n          </div>\n          <div class=\"form-check mb-3\">\n            <input\n              v-model=\"attachFile\"\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"\"\n              id=\"chkFileUploadUpdate\"\n            />\n            <label class=\"form-check-label\" for=\"chkFileUploadUpdate\"\n              >파일 추가</label\n            >\n          </div>\n          <div class=\"mb-3\" v-show=\"attachFile\" id=\"imgFileUploadUpdateWrapper\">\n            <input\n              @change=\"changeFile\"\n              type=\"file\"\n              id=\"inputFileUploadUpdate\"\n              multiple\n            />\n            <div id=\"imgFileUploadUpdateThumbnail\" class=\"thumbnail-wrapper\">\n              <!-- vue way img 를 만들어서 append 하지 않고, v-for 로 처리 -->\n              <img\n                v-for=\"(file, index) in fileList\"\n                v-bind:src=\"file\"\n                v-bind:key=\"index\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button\n            @click=\"boardUpdate\"\n            class=\"btn btn-sm btn-primary btn-outline\"\n            data-dismiss=\"modal\"\n            type=\"button\"\n          >\n            수정\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport CKEditor from \"@ckeditor/ckeditor5-vue2\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport VueAlertify from \"vue-alertify\";\n\nVue.use(CKEditor).use(VueAlertify);\n\nimport http from \"@/api/http.js\";\n\nexport default {\n  name: \"UpdateModal\",\n  // props: [\"board\"],\n  // data 는 CKEditor, attachFile, fileList UI 관련 3개만\n  data() {\n    return {\n      CKEditor: \"\",\n      attachFile: false,\n      fileList: [], // store 의 fileList 와 구분됨. 새로 첨부되는 파일을 위한.\n    };\n  },\n  // v-model -title\n  computed: {\n    storeTitle: {\n      get() {\n        return this.$store.state.board.title;\n      },\n      set(title) {\n        this.$store.commit(\"SET_BOARD_TITLE\", title);\n      },\n    },\n  },\n  methods: {\n    // modal 초기화\n    initUI() {\n      this.CKEditor.setData(this.$store.state.board.content);\n      this.attachFile = false;\n      this.fileList = [];\n      document.querySelector(\"#inputFileUploadUpdate\").value = \"\";\n    },\n    changeFile(fileEvent) {\n      this.fileList = []; // thumbnail 초기화\n\n      const fileArray = Array.from(fileEvent.target.files);\n      fileArray.forEach((file) => {\n        this.fileList.push(URL.createObjectURL(file)); // push : array 에 항목 추가\n      });\n    },\n    // 굳이 actions 에 있을 필요 없다. backend async 작업이지만, 그 결과로 store 를 변경하는 내용이 없다.\n    async boardUpdate() {\n      // post form data\n      let formData = new FormData();\n      formData.append(\"boardId\", this.$store.state.board.boardId); // update 에 추가\n      formData.append(\"title\", this.$store.state.board.title);\n      formData.append(\"content\", this.CKEditor.getData()); // store X !!!!\n\n      // file upload\n      let attachFiles = document.querySelector(\"#inputFileUploadUpdate\").files;\n\n      if (attachFiles.length > 0) {\n        const fileArray = Array.from(attachFiles);\n        fileArray.forEach((file) => formData.append(\"file\", file));\n      }\n\n      let options = {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      };\n\n      // not put, REST but FileUpload\n      try {\n        let { data } = await http.post(\n          \"/boards/\" + this.$store.state.board.boardId,\n          formData,\n          options\n        );\n\n        console.log(\"UpdateModalVue: data : \");\n        console.log(data);\n        if (data.result == \"login\") {\n          this.doLogout();\n        } else {\n          this.$alertify.success(\"글이 수정되었습니다.\");\n          this.closeModal();\n        }\n      } catch (error) {\n        console.log(\"UpdateModalVue: error \");\n        console.log(error);\n      }\n    },\n    closeModal() {\n      this.$emit(\"call-parent-update\"); // no parameter\n    },\n    // logout 처리 별도 method\n    doLogout() {\n      this.$store.commit(\"SET_LOGIN\", {\n        isLogin: false,\n        userName: \"\",\n        userProfileImageUrl: \"\",\n      });\n      this.$router.push(\"/login\");\n    },\n  },\n  // modal.show() 이전에 이미 mounted() 호출됨\n  async mounted() {\n    try {\n      this.CKEditor = await ClassicEditor.create(\n        document.querySelector(\"#divEditorUpdate\")\n      );\n    } catch (error) {\n      console.error(error);\n    }\n\n    // bootstrap modal show event hook\n    // UpdateModal 이 보일 때 초기화\n    let $this = this;\n    this.$el.addEventListener(\"show.bs.modal\", function () {\n      $this.initUI();\n    });\n  },\n  // watch 사용 X\n  // props 사용 X\n  // watch: {\n  //   board : function(){\n  //     // props --> data\n  //     this.boardId = this.board.boardId;\n  //     this.title = this.board.title;\n  //     this.CKEditor.setData( this.board.content );\n  //     // 아래의 내용을 추가하지 않음\n  //     // 기존 파일 내용은 props - board 를 이용\n  //     // fileList 는 신규 파일에 적용\n  //     //this.fileList = this.board.fileList;\n\n  //     // 첨부 파일 관련 초기화\n  //     // 수정 또는 수정 전 첨부 파일을 선택하면 그대로 남아 있다.\n  //     this.attachFile = false;\n  //     this.fileList = [];\n  //   }\n  // }\n};\n</script>\n\n<style scoped>\n.modal >>> .ck-editor__editable {\n  min-height: 300px !important;\n}\n\n.modal >>> .thumbnail-wrapper {\n  margin-top: 5px;\n}\n\n.modal >>> .thumbnail-wrapper img {\n  width: 100px !important;\n  margin-right: 5px;\n  max-width: 100%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}