{"ast":null,"code":"import _asyncToGenerator from \"C:/SSAFY/workspace/vuejs/happyhouse_final/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport InsertModal from \"@/components/modals/InsertModal.vue\";\nimport DetailModal from \"@/components/modals/DetailModal.vue\";\nimport UpdateModal from \"@/components/modals/UpdateModal.vue\";\nimport { Modal } from \"bootstrap\";\nimport http from \"@/api/http.js\";\nimport util from \"@/common/util.js\";\nimport Pagination from \"../components/Pagination.vue\"; // 삭제\n\nimport Vue from \"vue\";\nimport VueAlertify from \"vue-alertify\";\nVue.use(VueAlertify);\nexport default {\n  name: \"BoardMain\",\n  components: {\n    InsertModal: InsertModal,\n    DetailModal: DetailModal,\n    UpdateModal: UpdateModal,\n    Pagination: Pagination\n  },\n  data: function data() {\n    return {\n      // modal\n      insertModal: null,\n      detailModal: null,\n      updateModal: null\n    };\n  },\n  computed: {\n    // gttters 이용\n    listGetters: function listGetters() {\n      return this.$store.getters.getBoardList; // no getBoardList()\n    }\n  },\n  methods: {\n    // list\n    // store actions 에 구현\n    // 가능한 한 가지 방법\n    boardList: function boardList() {\n      this.$store.dispatch(\"boardList\");\n    },\n    // pagination\n    movePage: function movePage(pageIndex) {\n      console.log(\"BoardMainVue : movePage : pageIndex : \" + pageIndex); // store commit 으로 변경\n      // this.offset = (pageIndex - 1) * this.listRowCount;\n      // this.currentPageIndex = pageIndex;\n\n      this.$store.commit(\"SET_BOARD_MOVE_PAGE\", pageIndex);\n      this.boardList();\n    },\n    // util\n    makeDateStr: util.makeDateStr,\n    // insert\n    showInsertModal: function showInsertModal() {\n      this.insertModal.show();\n    },\n    closeAfterInsert: function closeAfterInsert() {\n      this.insertModal.hide();\n      this.boardList();\n    },\n    // detail\n    boardDetail: function boardDetail(boardId) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$http$get, data, dto;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return http.get(\"/boards/\" + boardId);\n\n              case 3:\n                _yield$http$get = _context.sent;\n                data = _yield$http$get.data;\n                console.log(data);\n\n                if (data.result == \"login\") {\n                  _this.doLogout(); // this.$router.push(\"/login\"); 에서 변경\n\n                } else {\n                  dto = data.dto;\n\n                  _this.$store.commit(\"SET_BOARD_DETAIL\", dto);\n\n                  _this.detailModal.show();\n                }\n\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(\"BoardMainVue: error : \");\n                console.log(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }))();\n    },\n    changeToUpdate: function changeToUpdate() {\n      // board parameter 필요 없음.\n      // data update 사용 X\n      // this.board = board;\n      this.detailModal.hide();\n      this.updateModal.show();\n    },\n    closeAfterUpdate: function closeAfterUpdate() {\n      this.updateModal.hide();\n      this.boardList();\n    },\n    changeToDelete: function changeToDelete() {\n      this.detailModal.hide();\n      var $this = this; // alertify.confirm-function()에서 this 는 alertify 객체\n\n      this.$alertify.confirmWithTitle(\"삭제 확인\", \"이 글을 삭제하시겠습니까?\", function () {\n        // board.boardId 사용 X\n        $this.boardDelete(); // $this 사용\n      }, function () {\n        console.log(\"cancel\");\n      });\n    },\n    boardDelete: function boardDelete() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$http$delete, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return http.delete(\"/boards/\" + _this2.$store.state.board.boardId);\n\n              case 3:\n                _yield$http$delete = _context2.sent;\n                data = _yield$http$delete.data;\n                console.log(data);\n\n                if (data.result == \"login\") {\n                  _this2.doLogout();\n                } else {\n                  _this2.$alertify.success(\"글이 삭제되었습니다.\");\n\n                  _this2.boardList();\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(\"BoardMainVue: error : \");\n                console.log(_context2.t0);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 9]]);\n      }))();\n    },\n    // logout 처리 별도 method\n    doLogout: function doLogout() {\n      this.$store.commit(\"SET_LOGIN\", {\n        isLogin: false,\n        userName: \"\",\n        userProfileImageUrl: \"\"\n      });\n      this.$router.push(\"/login\");\n    }\n  },\n  created: function created() {\n    this.boardList();\n  },\n  mounted: function mounted() {\n    this.insertModal = new Modal(document.getElementById(\"insertModal\"));\n    this.detailModal = new Modal(document.getElementById(\"detailModal\"));\n    this.updateModal = new Modal(document.getElementById(\"updateModal\"));\n  },\n  filters: {\n    makeDateStr: function makeDateStr(date, separator) {\n      return date.year + separator + (date.month < 10 ? \"0\" + date.month : date.month) + separator + (date.day < 10 ? \"0\" + date.day : date.day);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AAEA;AAEA;AACA;AAEA,sD,CAEA;;AACA;AACA;AACAA;AAEA;EACAC,iBADA;EAEAC;IAAAC;IAAAC;IAAAC;IAAAC;EAAA,CAFA;EAGAC,IAHA,kBAGA;IACA;MACA;MACAC,iBAFA;MAGAC,iBAHA;MAIAC;IAJA;EAMA,CAVA;EAWAC;IACA;IACAC,WAFA,yBAEA;MACA,wCADA,CACA;IACA;EAJA,CAXA;EAiBAC;IACA;IACA;IACA;IACAC,SAJA,uBAIA;MACA;IACA,CANA;IAQA;IACAC,QATA,oBASAC,SATA,EASA;MACAC,kEADA,CAGA;MACA;MACA;;MACA;MAEA;IACA,CAlBA;IAoBA;IACAC,6BArBA;IAuBA;IACAC,eAxBA,6BAwBA;MACA;IACA,CA1BA;IA4BAC,gBA5BA,8BA4BA;MACA;MACA;IACA,CA/BA;IAiCA;IACAC,WAlCA,uBAkCAC,OAlCA,EAkCA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAMAC,8BANA;;cAAA;gBAAA;gBAMAhB,IANA,mBAMAA,IANA;gBAOAU;;gBAEA;kBACA,iBADA,CACA;;gBACA,CAFA,MAEA;kBACAO,GADA,GACAjB,IADA,CACAiB,GADA;;kBAEA;;kBAEA;gBACA;;gBAhBA;gBAAA;;cAAA;gBAAA;gBAAA;gBAkBAP;gBACAA;;cAnBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAqBA,CAvDA;IAyDAQ,cAzDA,4BAyDA;MACA;MACA;MACA;MACA;MACA;IACA,CA/DA;IAiEAC,gBAjEA,8BAiEA;MACA;MACA;IACA,CApEA;IAsEAC,cAtEA,4BAsEA;MACA;MAEA,iBAHA,CAGA;;MACA,gCACA,OADA,EAEA,gBAFA,EAGA;QACA;QACAC,oBAFA,CAEA;MACA,CANA,EAOA;QACAX;MACA,CATA;IAWA,CArFA;IAsFAY,WAtFA,yBAsFA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAIAN,YACA,8CADA,CAJA;;cAAA;gBAAA;gBAIAhB,IAJA,sBAIAA,IAJA;gBAOAU;;gBAEA;kBACA;gBACA,CAFA,MAEA;kBACA;;kBACA;gBACA;;gBAdA;gBAAA;;cAAA;gBAAA;gBAAA;gBAgBAA;gBACAA;;cAjBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAmBA,CAzGA;IA0GA;IACAa,QA3GA,sBA2GA;MACA;QACAC,cADA;QAEAC,YAFA;QAGAC;MAHA;MAKA;IACA;EAlHA,CAjBA;EAqIAC,OArIA,qBAqIA;IACA;EACA,CAvIA;EAwIAC,OAxIA,qBAwIA;IACA;IACA;IACA;EACA,CA5IA;EA6IAC;IACAlB;MACA,OACAmB,YACAC,SADA,IAEAD,+CAFA,IAGAC,SAHA,IAIAD,yCAJA,CADA;IAOA;EATA;AA7IA","names":["Vue","name","components","InsertModal","DetailModal","UpdateModal","Pagination","data","insertModal","detailModal","updateModal","computed","listGetters","methods","boardList","movePage","pageIndex","console","makeDateStr","showInsertModal","closeAfterInsert","boardDetail","boardId","http","dto","changeToUpdate","closeAfterUpdate","changeToDelete","$this","boardDelete","doLogout","isLogin","userName","userProfileImageUrl","created","mounted","filters","date","separator"],"sourceRoot":"src/views","sources":["BoardView.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h4 class=\"text-center\">게시판 - Main</h4>\r\n\r\n    <div class=\"input-group mb-3\">\r\n      <!-- store 사용 -->\r\n      <!-- <input v-model=\"searchWord\" @keydown.enter=\"boardList\" type=\"text\" class=\"form-control\"> -->\r\n      <input\r\n        v-model=\"$store.state.board.searchWord\"\r\n        @keydown.enter=\"boardList\"\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n      />\r\n      <button @click=\"boardList\" class=\"btn btn-success\" type=\"button\">\r\n        Search\r\n      </button>\r\n    </div>\r\n\r\n    <table class=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>제목</th>\r\n          <th>작성자</th>\r\n          <th>작성일시</th>\r\n          <th>조회수</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <!-- store 사용 -->\r\n\r\n        <!-- 직접 store 에 접근해도 된다. -->\r\n        <!-- <tr v-for=\"(board, index) in $store.state.board.list\" @click=\"boardDetail(board.boardId)\" v-bind:key=\"index\"> -->\r\n\r\n        <!-- getters 를 이용하는 코드 -->\r\n        <!-- computed - listGetters - getBoardList  -->\r\n        <tr\r\n          style=\"cursor: pointer\"\r\n          v-for=\"(board, index) in listGetters\"\r\n          @click=\"boardDetail(board.boardId)\"\r\n          v-bind:key=\"index\"\r\n        >\r\n          <td>{{ board.boardId }}</td>\r\n          <td>{{ board.title }}</td>\r\n          <td>{{ board.userName }}</td>\r\n          <td>{{ board.regDt.date | makeDateStr(\".\") }}</td>\r\n          <td>{{ board.readCount }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- props 사용 X -->\r\n    <!-- <pagination \r\n      v-bind:listRowCount=\"listRowCount\"\r\n      v-bind:pageLinkCount=\"pageLinkCount\"\r\n      v-bind:currentPageIndex=\"currentPageIndex\"\r\n      v-bind:totalListItemCount=\"totalListItemCount\"\r\n      v-on:call-parent=\"movePage\"\r\n    ></pagination> -->\r\n    <pagination v-on:call-parent=\"movePage\"></pagination>\r\n\r\n    <button class=\"btn btn-sm btn-primary\" @click=\"showInsertModal\">\r\n      글쓰기\r\n    </button>\r\n\r\n    <insert-modal v-on:call-parent-insert=\"closeAfterInsert\"></insert-modal>\r\n    <!-- props 제거 -->\r\n    <detail-modal\r\n      v-on:call-parent-change-to-update=\"changeToUpdate\"\r\n      v-on:call-parent-change-to-delete=\"changeToDelete\"\r\n    ></detail-modal>\r\n    <update-modal v-on:call-parent-update=\"closeAfterUpdate\"></update-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport InsertModal from \"@/components/modals/InsertModal.vue\";\r\nimport DetailModal from \"@/components/modals/DetailModal.vue\";\r\nimport UpdateModal from \"@/components/modals/UpdateModal.vue\";\r\n\r\nimport { Modal } from \"bootstrap\";\r\n\r\nimport http from \"@/api/http.js\";\r\nimport util from \"@/common/util.js\";\r\n\r\nimport Pagination from \"../components/Pagination.vue\";\r\n\r\n// 삭제\r\nimport Vue from \"vue\";\r\nimport VueAlertify from \"vue-alertify\";\r\nVue.use(VueAlertify);\r\n\r\nexport default {\r\n  name: \"BoardMain\",\r\n  components: { InsertModal, DetailModal, UpdateModal, Pagination },\r\n  data() {\r\n    return {\r\n      // modal\r\n      insertModal: null,\r\n      detailModal: null,\r\n      updateModal: null,\r\n    };\r\n  },\r\n  computed: {\r\n    // gttters 이용\r\n    listGetters() {\r\n      return this.$store.getters.getBoardList; // no getBoardList()\r\n    },\r\n  },\r\n  methods: {\r\n    // list\r\n    // store actions 에 구현\r\n    // 가능한 한 가지 방법\r\n    boardList() {\r\n      this.$store.dispatch(\"boardList\");\r\n    },\r\n\r\n    // pagination\r\n    movePage(pageIndex) {\r\n      console.log(\"BoardMainVue : movePage : pageIndex : \" + pageIndex);\r\n\r\n      // store commit 으로 변경\r\n      // this.offset = (pageIndex - 1) * this.listRowCount;\r\n      // this.currentPageIndex = pageIndex;\r\n      this.$store.commit(\"SET_BOARD_MOVE_PAGE\", pageIndex);\r\n\r\n      this.boardList();\r\n    },\r\n\r\n    // util\r\n    makeDateStr: util.makeDateStr,\r\n\r\n    // insert\r\n    showInsertModal() {\r\n      this.insertModal.show();\r\n    },\r\n\r\n    closeAfterInsert() {\r\n      this.insertModal.hide();\r\n      this.boardList();\r\n    },\r\n\r\n    // detail\r\n    async boardDetail(boardId) {\r\n      // store 변경\r\n      // this.boardId = boardId;\r\n      // this.$store.commit('mutateSetBoardBoardId', boardId);\r\n\r\n      try {\r\n        let { data } = await http.get(\"/boards/\" + boardId);\r\n        console.log(data);\r\n\r\n        if (data.result == \"login\") {\r\n          this.doLogout(); // this.$router.push(\"/login\"); 에서 변경\r\n        } else {\r\n          let { dto } = data;\r\n          this.$store.commit(\"SET_BOARD_DETAIL\", dto);\r\n\r\n          this.detailModal.show();\r\n        }\r\n      } catch (error) {\r\n        console.log(\"BoardMainVue: error : \");\r\n        console.log(error);\r\n      }\r\n    },\r\n\r\n    changeToUpdate() {\r\n      // board parameter 필요 없음.\r\n      // data update 사용 X\r\n      // this.board = board;\r\n      this.detailModal.hide();\r\n      this.updateModal.show();\r\n    },\r\n\r\n    closeAfterUpdate() {\r\n      this.updateModal.hide();\r\n      this.boardList();\r\n    },\r\n\r\n    changeToDelete() {\r\n      this.detailModal.hide();\r\n\r\n      var $this = this; // alertify.confirm-function()에서 this 는 alertify 객체\r\n      this.$alertify.confirmWithTitle(\r\n        \"삭제 확인\",\r\n        \"이 글을 삭제하시겠습니까?\",\r\n        function () {\r\n          // board.boardId 사용 X\r\n          $this.boardDelete(); // $this 사용\r\n        },\r\n        function () {\r\n          console.log(\"cancel\");\r\n        }\r\n      );\r\n    },\r\n    async boardDelete() {\r\n      // parameter 사용 X\r\n\r\n      try {\r\n        let { data } = await http.delete(\r\n          \"/boards/\" + this.$store.state.board.boardId\r\n        );\r\n        console.log(data);\r\n\r\n        if (data.result == \"login\") {\r\n          this.doLogout();\r\n        } else {\r\n          this.$alertify.success(\"글이 삭제되었습니다.\");\r\n          this.boardList();\r\n        }\r\n      } catch (error) {\r\n        console.log(\"BoardMainVue: error : \");\r\n        console.log(error);\r\n      }\r\n    },\r\n    // logout 처리 별도 method\r\n    doLogout() {\r\n      this.$store.commit(\"SET_LOGIN\", {\r\n        isLogin: false,\r\n        userName: \"\",\r\n        userProfileImageUrl: \"\",\r\n      });\r\n      this.$router.push(\"/login\");\r\n    },\r\n  },\r\n  created() {\r\n    this.boardList();\r\n  },\r\n  mounted() {\r\n    this.insertModal = new Modal(document.getElementById(\"insertModal\"));\r\n    this.detailModal = new Modal(document.getElementById(\"detailModal\"));\r\n    this.updateModal = new Modal(document.getElementById(\"updateModal\"));\r\n  },\r\n  filters: {\r\n    makeDateStr: function (date, separator) {\r\n      return (\r\n        date.year +\r\n        separator +\r\n        (date.month < 10 ? \"0\" + date.month : date.month) +\r\n        separator +\r\n        (date.day < 10 ? \"0\" + date.day : date.day)\r\n      );\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}